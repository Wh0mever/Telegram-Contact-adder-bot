import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError
from config import (
    BOT_TOKEN, API_ID, API_HASH,
    GROUPS_FILE, CONTACTS_FILE, BLACKLIST_FILE,
    ADMINS_FILE, STATS_FILE, BOT_COMMANDS
)
from handlers import (
    base_handler, group_handler,
    contacts_handler, blacklist_handler,
    stats_handler, message_handler
)
from utils.json_utils import (
    init_json_files, load_json, save_json,
    update_stats
)
from utils.logger import logger
from utils.telegram_utils import add_contact_to_telegram, get_group_info, is_admin_in_group, get_user_info
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON —Ñ–∞–π–ª–æ–≤ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
DEFAULT_FILES = {
    GROUPS_FILE: {},
    CONTACTS_FILE: {},
    BLACKLIST_FILE: {},
    ADMINS_FILE: {},
    STATS_FILE: {
        'total_contacts': 0,
        'total_groups': 0,
        'total_blacklisted': 0
    }
}

async def notify_admin(bot: Bot, group_id: int, user_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≥—Ä—É–ø–ø—ã –æ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ"""
    try:
        admins = load_json(ADMINS_FILE)
        group_admins = admins.get(str(group_id), {})
        
        for admin_id in group_admins:
            try:
                message = (
                    f"‚úÖ <b>–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {user_data.get('group_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞')}:</b>\n\n"
                    f"üë§ {user_data['first_name']} {user_data.get('last_name', '')}\n"
                    f"üîó @{user_data.get('username', '–ù–µ—Ç username')}\n"
                    f"üì± {user_data.get('phone', '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')}\n"
                    f"üÜî {user_data['id']}"
                )
                await bot.send_message(int(admin_id), message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º: {e}")

async def start_client():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Telethon –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    client = TelegramClient(
        'user_session',
        API_ID,
        API_HASH,
        system_version="4.16.30-vxCUSTOM",
        device_model="Telegram Desktop",
        app_version="4.8.1"
    )
    
    try:
        await client.connect()
        
        if not await client.is_user_authorized():
            logger.info("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            
            try:
                phone = input("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä +79123456789): ")
                await client.send_code_request(phone)
                code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ Telegram: ")
                
                try:
                    await client.sign_in(phone, code)
                except SessionPasswordNeededError:
                    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")
                    await client.sign_in(password=password)
                
                logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                return client
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                return None
            
        return client
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telethon –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ Telethon
        logging.getLogger('telethon').setLevel(logging.WARNING)
        logging.getLogger('aiohttp').setLevel(logging.WARNING)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª—ã
        init_json_files(DEFAULT_FILES)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon
        client = await start_client()
        if not client:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telethon –∫–ª–∏–µ–Ω—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return
            
        logger.info("Telethon –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        bot = Bot(
            token=BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç Telethon –∫ –±–æ—Ç—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
        bot.telethon_client = client
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        commands = [
            BotCommand(command=command, description=desc)
            for command, desc in BOT_COMMANDS
        ]
        await bot.set_my_commands(commands)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã
        dp.include_router(base_handler.router)
        dp.include_router(group_handler.router)
        dp.include_router(contacts_handler.router)
        dp.include_router(blacklist_handler.router)
        dp.include_router(stats_handler.router)
        dp.include_router(message_handler.router)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telethon
        @client.on(events.NewMessage)
        async def handle_new_message(event):
            try:
                if not event.is_group:
                    return
                    
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                group = await event.get_chat()
                sender = await event.get_sender()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞
                groups = load_json(GROUPS_FILE)
                if str(group.id) not in groups:
                    return
                    
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = {
                    'id': sender.id,
                    'username': sender.username,
                    'first_name': sender.first_name,
                    'last_name': getattr(sender, 'last_name', ''),
                    'phone': getattr(sender, 'phone', ''),
                    'group_id': str(group.id),
                    'group_title': group.title
                }
                
                # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
                    contacts = load_json(CONTACTS_FILE)
                    user_id_str = str(user_data['id'])
                    
                    if user_id_str in contacts:
                        logger.info(f"–ö–æ–Ω—Ç–∞–∫—Ç {user_data['first_name']} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")
                        return
                    
                    # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å
                    contact_result = await add_contact_to_telegram(client, user_data)
                    if contact_result:
                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                        await notify_admin(bot, group.id, user_data)
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {user_data['first_name']} –∏–∑ –≥—Ä—É–ø–ø—ã {group.title}")
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
                        update_stats(STATS_FILE, GROUPS_FILE, CONTACTS_FILE, BLACKLIST_FILE)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        if 'client' in locals():
            await client.disconnect()
            
if __name__ == "__main__":
    asyncio.run(main())

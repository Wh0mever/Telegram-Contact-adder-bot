from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.json_utils import load_json, save_json, add_group
from utils.logger import logger
from utils.telegram_utils import get_group_info, is_admin_in_group
from config import GROUPS_FILE, ADMINS_FILE

router = Router()

@router.message(Command("add_group"))
async def add_group_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∏–ª–∏ username –≥—Ä—É–ø–ø—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()
        if len(args) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_group <ID –∏–ª–∏ @username –≥—Ä—É–ø–ø—ã>"
            )
            return
            
        group_id = args[1].replace('@', '')  # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        user_id = message.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞
            client = message.bot.telethon_client
            if not client:
                logger.error("Telethon –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group_info = await get_group_info(client, group_id)
            if not group_info:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
            bot_id = (await client.get_me()).id
            if not await is_admin_in_group(client, group_id, bot_id):
                await message.answer(
                    "‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã.\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–æ–∫
            if add_group(GROUPS_FILE, group_info):
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∞ –≥—Ä—É–ø–ø—ã
                admins = load_json(ADMINS_FILE)
                group_id_str = str(group_info['id'])
                
                if group_id_str not in admins:
                    admins[group_id_str] = {}
                    
                admins[group_id_str][str(user_id)] = {
                    'added_date': group_info['added_date'],
                    'username': message.from_user.username,
                    'first_name': message.from_user.first_name,
                    'last_name': message.from_user.last_name
                }
                
                save_json(ADMINS_FILE, admins)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await message.answer(
                    f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                    f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {group_info['title']}\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group_info['participants_count']}\n"
                    f"üîó Username: @{group_info['username'] if group_info['username'] else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
                    f"üë§ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –≤ –±–æ—Ç–µ.\n"
                    f"üì© –í–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö."
                )
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞: {group_info['title']} ({group_id}), –∞–¥–º–∏–Ω: {user_id}")
            else:
                await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã add_group: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã.")

@router.message(Command("groups"))
async def list_groups(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    try:
        user_id = str(message.from_user.id)
        admins = load_json(ADMINS_FILE)
        
        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
        admin_groups = []
        for group_id, group_admins in admins.items():
            if user_id in group_admins:
                admin_groups.append(group_id)
                
        if not admin_groups:
            await message.reply("üìù –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
            return
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        groups = load_json(GROUPS_FILE)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø
        response = "üìã –í–∞—à–∏ –≥—Ä—É–ø–ø—ã:\n\n"
        for group_id in admin_groups:
            if group_id in groups:
                group_data = groups[group_id]
                response += (
                    f"üìå {group_data['title']}\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {group_data['participants_count']}\n"
                    f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {group_data['contacts_count']}\n"
                    f"üìÖ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {group_data['added_date']}\n"
                    f"üîó {f'@{group_data['username']}' if group_data['username'] else '–ù–µ—Ç username'}\n\n"
                )
            
        await message.reply(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø.") 